# ====================================================================
# CI/CD 파이프라인 (현재 주석 처리됨)
# 사용 시: backend.md의 "🔄 CI/CD 파이프라인 활성화" 섹션 참고
# ====================================================================

# name: CI/CD Pipeline
#
# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main ]
#
# jobs:
#   test:
#     runs-on: ubuntu-latest
#     
#     strategy:
#       matrix:
#         node-version: [18.x, 20.x]
#     
#     steps:
#     - uses: actions/checkout@v3
#     
#     - name: Use Node.js ${{ matrix.node-version }}
#       uses: actions/setup-node@v3
#       with:
#         node-version: ${{ matrix.node-version }}
#         cache: 'npm'
#         cache-dependency-path: |
#           frontend/package-lock.json
#           backend/package-lock.json
#     
#     - name: Install Frontend Dependencies
#       run: |
#         cd frontend
#         npm ci
#     
#     - name: Install Backend Dependencies
#       run: |
#         cd backend
#         npm ci
#     
#     - name: Run Frontend Linting
#       run: |
#         cd frontend
#         npm run lint:check
#     
#     - name: Run Frontend Tests
#       run: |
#         cd frontend
#         npm run test:coverage
#     
#     - name: Run Backend Tests
#       run: |
#         cd backend
#         npm test
#     
#     - name: Build Frontend
#       run: |
#         cd frontend
#         npm run build
#     
#     - name: Upload Coverage Reports
#       uses: codecov/codecov-action@v3
#       with:
#         files: ./frontend/coverage/lcov.info
#         flags: frontend
#         name: frontend-coverage
#
#   security:
#     runs-on: ubuntu-latest
#     
#     steps:
#     - uses: actions/checkout@v3
#     
#     - name: Run Security Audit
#       run: |
#         cd frontend
#         npm audit --audit-level=moderate
#         
#         cd ../backend
#         npm audit --audit-level=moderate
#     
#     - name: Run Dependency Check
#       uses: actions/dependency-review-action@v3
#       if: github.event_name == 'pull_request'
#
#   build:
#     needs: [test, security]
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
#     
#     steps:
#     - uses: actions/checkout@v3
#     
#     - name: Use Node.js 20.x
#       uses: actions/setup-node@v3
#       with:
#         node-version: 20.x
#         cache: 'npm'
#         cache-dependency-path: |
#           frontend/package-lock.json
#           backend/package-lock.json
#     
#     - name: Install Dependencies
#       run: |
#         cd frontend && npm ci
#         cd ../backend && npm ci
#     
#     - name: Build Frontend
#       run: |
#         cd frontend
#         npm run build
#     
#     - name: Build Docker Images
#       run: |
#         docker build -t fortune-cookie-frontend ./frontend
#         docker build -t fortune-cookie-backend ./backend
#     
#     - name: Push to Container Registry
#       if: ${{ secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD }}
#       run: |
#         echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
#         docker tag fortune-cookie-frontend ${{ secrets.DOCKER_USERNAME }}/fortune-cookie-frontend:latest
#         docker tag fortune-cookie-backend ${{ secrets.DOCKER_USERNAME }}/fortune-cookie-backend:latest
#         docker push ${{ secrets.DOCKER_USERNAME }}/fortune-cookie-frontend:latest
#         docker push ${{ secrets.DOCKER_USERNAME }}/fortune-cookie-backend:latest
#
#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
#     
#     steps:
#     - name: Deploy to Production
#       run: |
#         echo "Deploying to production..."
#         # 실제 배포 스크립트 작성
#         # 예: kubectl, docker-compose, 또는 클라우드 서비스 배포
